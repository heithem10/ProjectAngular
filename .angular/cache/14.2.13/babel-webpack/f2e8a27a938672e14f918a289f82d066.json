{"ast":null,"code":"import { environment } from 'environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserServiceService = /*#__PURE__*/(() => {\n  class UserServiceService {\n    constructor(http) {\n      this.http = http;\n      this.apiBaseUrl = environment.baseUrl;\n    }\n\n    getUsers() {\n      return this.http.get(`${this.apiBaseUrl}/users`, {\n        withCredentials: true\n      });\n    }\n\n    register(user) {\n      return this.http.post(`${this.apiBaseUrl}/auth/register`, user, {\n        withCredentials: true\n      });\n    }\n\n    login(email, password) {\n      return this.http.post(`${this.apiBaseUrl}/auth/login`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      });\n    }\n\n    updateUserById(id, user) {\n      return this.http.patch(`${this.apiBaseUrl}/users/updateUserById/${id}`, user, {\n        withCredentials: true\n      });\n    }\n\n    getLoggedInUser() {\n      return this.http.get(`${this.apiBaseUrl}/users/showMe`, {\n        withCredentials: true\n      });\n    } // Update user profile by ID\n\n\n    updateLoggedInUser(userId, userData) {\n      return this.http.patch(`${this.apiBaseUrl}/users/updateUserById/${userId}`, userData, {\n        withCredentials: true\n      });\n    }\n\n    logout() {\n      return this.http.get(`${this.apiBaseUrl}/auth/logout`, {\n        withCredentials: true\n      });\n    }\n\n  }\n\n  UserServiceService.ɵfac = function UserServiceService_Factory(t) {\n    return new (t || UserServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserServiceService,\n    factory: UserServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}